{"version":3,"sources":["Reducers/reducers.js","store.js","constants.js","Components/Header.js","Components/Card.js","Components/CardList.js","Components/SearchBox.js","Components/Scroll.js","Components/CounterButton.js","Containers/App.js","Actions/actions.js","serviceWorker.js","index.js"],"names":["initialStateSearch","searchField","initialStateRobots","is_pending","robots","error","store","createStore","combineReducers","searchRobots","state","action","type","payload","requestRobots","applyMiddleware","thunk","thunkMiddleware","Header","nextProps","nextState","console","log","className","Component","Card","props","id","name","email","src","alt","CardList","map","user","username","SearchBox","searchChange","onChange","placeholder","Scroll","style","overflowY","border","height","children","CounterButton","updateCounter","setState","count","this","color","onClick","App","onRequestRobots","onSearchChange","filtered_robots","filter","robot","toLowerCase","includes","connect","dispatch","event","target","value","fetch","then","response","json","data","catch","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","ReactDOM","render","document","getElementById","URL","process","href","origin","addEventListener","contentType","headers","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.a2746dc9.chunk.js","sourcesContent":["import {\n  CHANGE_SEARCH_FIELD,\n  REQUEST_ROBOTS_PENDING,\n  REQUEST_ROBOTS_SUCCESS,\n  REQUEST_ROBOTS_FAILED\n} from \"../constants.js\";\n\nconst initialStateSearch = {\n  searchField: \"\"\n};\n\nexport const searchRobots = (state = initialStateSearch, action = {}) => {\n  switch (action.type) {\n    case CHANGE_SEARCH_FIELD:\n      state = { ...state, searchField: action.payload };\n      break;\n    default:\n  }\n  return state;\n};\n\nconst initialStateRobots = {\n  is_pending: false,\n  robots: [],\n  error: \"\"\n};\n\nexport const requestRobots = (state = initialStateRobots, action = {}) => {\n  switch (action.type) {\n    case REQUEST_ROBOTS_PENDING:\n      state = { ...state, is_pending: true };\n      break;\n    case REQUEST_ROBOTS_SUCCESS:\n      state = { ...state, is_pending: false, robots: action.payload };\n      break;\n    case REQUEST_ROBOTS_FAILED:\n      state = { ...state, is_pending: false, error: action.payload };\n      break;\n    default:\n  }\n  return state;\n};\n","// Redux Methods\nimport { createStore, applyMiddleware, combineReducers } from \"redux\";\nimport logger from \"redux-logger\";\nimport thunk from \"redux-thunk\";\nimport thunkMiddleware from \"redux-thunk\";\n\n// Reducers\nimport { searchRobots, requestRobots } from \"./Reducers/reducers\";\n\n// const store = createStore(combineReducers(searchRobots), {});\nconst store = createStore(\n  combineReducers({ searchRobots, requestRobots }),\n  applyMiddleware(thunk, thunkMiddleware)\n);\n\nexport default store;\n","export const CHANGE_SEARCH_FIELD = \"CHANGE_SEARCH_FIELD\";\n\nexport const REQUEST_ROBOTS_PENDING = \"REQUEST_ROBOTS_PENDING\";\nexport const REQUEST_ROBOTS_SUCCESS = \"REQUEST_ROBOTS_SUCCESS\";\nexport const REQUEST_ROBOTS_FAILED = \"REQUEST_ROBOTS_FAILED\";\n\n\n","import React, { Component } from \"react\";\n\nclass Header extends Component {\n  shouldComponentUpdate(nextProps, nextState) {\n    return false;\n  }\n  render() {\n    console.log(\"Header\");\n    return <h1 className=\"f1\"> Robofriends</h1>;\n  }\n}\n\nexport default Header;\n","import React, { Fragment } from \"react\";\n\nconst Card = props => {\n  const { id, name, email } = props;\n  return (\n    <Fragment>\n      <div className=\"tc bg-light-blue dib br3 pa3 ma2 grow bw2 shadow-5\">\n        <img src={`https://robohash.org/${id}?200x200`} alt=\"robot\"></img>\n        <div>\n          <h2>{name}</h2>\n          <p>{email}</p>\n        </div>\n      </div>\n    </Fragment>\n  );\n};\n\nexport default Card;\n","import React, { Fragment } from \"react\";\nimport Card from \"./Card.js\";\n\n// Destructuring of props = { robots }\nconst CardList = ({ robots }) => {\n  // Card Component List\n  console.log(\"Card List\");\n  return (\n    <Fragment>\n      <div>\n        {robots.map(user => {\n          return (\n            <Card\n              id={user.id}\n              name={user.name}\n              email={user.email}\n              username={user.username}\n            />\n          );\n        })}\n      </div>\n    </Fragment>\n  );\n};\n\nexport default CardList;\n","import React, { Fragment } from \"react\";\n\nconst SearchBox = ({ searchChange }) => {\n  console.log(\"SearchBox\");\n  return (\n    <Fragment>\n      <div className=\"pa2\">\n        <input\n          // Executes searchChange, which has the onSearchChange method from App class\n          onChange={searchChange}\n          className=\"pa3 ba b--black bg-lightest-blue\"\n          type=\"search\"\n          placeholder=\"Search a robot\"\n        ></input>\n      </div>\n    </Fragment>\n  );\n};\n\nexport default SearchBox;\n","import React from \"react\";\n\nconst Scroll = props => {\n  return (\n    <div\n      style={{\n        overflowY: \"scroll\",\n        border: \"2px solid white\",\n        height: \"70vh\"\n      }}\n    >\n      {props.children}\n    </div>\n  );\n};\n\nexport default Scroll;\n","import React, { Component } from \"react\";\n\nclass CounterButton extends Component {\n  constructor() {\n    super();\n    this.state = {\n      count: 0\n    };\n  }\n\n  shouldComponentUpdate(nextProps, nextState) {\n    console.log(nextProps, nextState);\n    if (this.state.count !== nextState.count) {\n      return true;\n    } else {\n      return false;\n    }\n  }\n\n  updateCounter = () => {\n    this.setState(state => {\n      return { count: state.count + 1 };\n    });\n  };\n\n  render() {\n    const { count } = this.state;\n    const { updateCounter } = this;\n    console.log(\"CounterButton\");\n    return (\n      <button color={this.props} onClick={updateCounter}>\n        {\" \"}\n        Count: {count}\n      </button>\n    );\n  }\n}\n\nexport default CounterButton;\n","import React, { Fragment, Component } from \"react\";\nimport Header from \"../Components/Header.js\";\nimport CardList from \"../Components/CardList.js\";\nimport SearchBox from \"../Components/SearchBox.js\";\nimport Scroll from \"../Components/Scroll.js\";\nimport CounterButton from \"../Components/CounterButton.js\";\nimport \"./App.css\";\n\nimport { connect } from \"react-redux\";\n\n// Import actions\nimport { setSearchField, requestRobots } from \"../Actions/actions.js\";\n\nconst mapStateToProps = state => {\n  return {\n    searchField: state.searchRobots.searchField,\n    robots: state.requestRobots.robots,\n    is_pending: state.requestRobots.is_pending,\n    error: state.requestRobots.error\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    onSearchChange: event => dispatch(setSearchField(event.target.value)),\n    onRequestRobots: () => dispatch(requestRobots())\n  };\n};\n\nclass App extends Component {\n  componentDidMount() {\n    this.props.onRequestRobots();\n  }\n\n  render() {\n    // This state comes from store.js (redux)\n    const { searchField, onSearchChange, robots, is_pending } = this.props;\n\n    const filtered_robots = robots.filter(robot => {\n      return robot.name.toLowerCase().includes(searchField.toLowerCase());\n    });\n\n    // Changes the CardList of Robots Searched\n    return is_pending ? (\n      <div>\n        <h1 className=\"tc\"> Loading, please wait</h1>\n      </div>\n    ) : (\n      <Fragment>\n        <div className=\"tc\">\n          <Header />\n          <CounterButton color={\"red\"} />\n          <SearchBox searchChange={onSearchChange} />\n          <Scroll>\n            <CardList robots={filtered_robots} />\n          </Scroll>\n        </div>\n      </Fragment>\n    );\n  }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\n","import {\n  CHANGE_SEARCH_FIELD,\n  REQUEST_ROBOTS_PENDING,\n  REQUEST_ROBOTS_SUCCESS,\n  REQUEST_ROBOTS_FAILED\n} from \"../constants.js\";\n\nexport const setSearchField = text => {\n  return {\n    type: CHANGE_SEARCH_FIELD,\n    payload: text\n  };\n};\n\nexport const requestRobots = () => dispatch => {\n  // Without payload\n  dispatch({ type: REQUEST_ROBOTS_PENDING });\n  fetch(\"https://jsonplaceholder.typicode.com/users\")\n    .then(response => response.json())\n    .then(data => dispatch({ type: REQUEST_ROBOTS_SUCCESS, payload: data }))\n    .catch(error => dispatch({ type: REQUEST_ROBOTS_FAILED, payload: error }));\n};\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"tachyons\";\nimport { Provider } from \"react-redux\";\nimport store from \"./store.js\";\nimport \"./index.css\";\nimport App from \"./Containers/App.js\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <div>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </div>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}